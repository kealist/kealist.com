head

enable bootstrap
enable smooth-scrolling
enable google-font
stylesheet css-path/font-awesome.min.css
google-font "Oswald"
title "kealist - Designing Dialects for Control and Communication"

body

navbar inverse [
    link #what "Maker Faire:  What is a Dialect?"
    link #projects "My Projects"
    link #dialects "Example Dialects"
    link #links "Links"
]
br
br
h1 "Designing Dialects for Control and Communication"

h2 #projects "What is a Dialect?"

p {Dialect is a term for a small language, or Domain-Specific-Languages (DSLs), that achieves a certain purpose. What does this mean, practically? Well, let's look at a use-case:}

h3 "Dice"

p {Let's say I need to calculate a lot of diverse dice rolls, I want to make a list of the number and type of dice that I want to calculate, such as below:}

pre {dice: [10 d10 4 d6]}

p {Thiings we notice:  First, it's readable; and second, there are no function calls for each number of dice.  This is a little "language" I have created for this problem.  I need to be able to parse this language and the rules will look something like this:}

pre {dice-rule: [
	some [integer! word!]
]}

p {This rule will tell whether the language matches the language or not:}

pre {>> parse dice dice-rule
== true}

p {We can even extend the "language" to include a die without a number in front of it:}

pre {
dice: [10 d8 d10 50 d6 d100]
dice-rule: [
	some [
		word! 
	|
		integer! word!
	]
]}

p {And the language is still parse-able.}

pre {>> parse dice dice-rule
== true}

p {However, it won't calculate the dice rolls yet. We can add some extra commands to do so:}

pre {dice-rule: [
	(total: 0)
	some [
		copy die word!
		(total: total + roll 1 get die/1)
	|
		copy n integer!
		copy die word!
		(total: total + roll n/1 get die/1)
	]
]}

p {Now, all we need to do is to define the roll function to add up the number of random rolls for each word and define the values for each die word!  Here is my implementation of a calculate function that does the above.}

pre {random/seed now/precise

d2: 2
d4: 4
d6: 6
d8: 8
d12: 12
d20: 20
d100: 100

calculate: function [b] [
	dice-rule: [
		(total: 0)
		some [
			copy die word!
			(total: total + roll 1 get die/1)
		|
			copy n integer!
			copy die word!
			(total: total + roll n/1 get die/1)
		]
	]

	roll: func [times [integer!] die [integer!]] [
		result: 0
		repeat i times [result: result + random die]
		result
	]

	parse b dice-rule
	total
]

repeat i 400 [ 
	print calculate [10 d10 4 d6]
]}

h2 #howto "How to Get Started"

p {Grab a pen or a text editor and write out some test cases.  What do you want to happen and when?}

h2 #projects "My Projects"

ul
li link  https://github.com/kealist/rebol-1 "Rebol 3 Serial Implementation" 
li link https://github.com/kealist/rebol-firmata "Firmata for Rebol 3"
li link https://github.com/kealist/chip8-reb "Chip8 Emulator"
li link https://github.com/kealist/CPPS-Automation "CPPS Automation"


h2 #dialects "Dialects"

ul
li link http://magazine.odroid.com/assets/201406/pdf/ODROID-Magazine-201406.pdf "ODROID Magazine: Odroid Show control dialect"
li link https://github.com/rebolek/Lest "Lest: Low Entropy System for Templating"
li link http://www.rebol.it/power-mezz/dialects/fsm.html "Finite-State-Machine (FSM) Dialect"


h2 #links "Links"

ul
li link http://www.red-lang.org/ "Red Programming Language"
li link https://github.com/rebol/rebol "Rebol 3 Repository"
li link http://blog.hostilefork.com/why-rebol-red-parse-cool/ "Why Rebol, Red, and the Parse dialect are Cool"
